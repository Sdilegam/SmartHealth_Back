// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartHealth_Infrastructure;

#nullable disable

namespace SmartHealth_Infrastructure.Migrations
{
    [DbContext(typeof(SmartHealthContext))]
    [Migration("20250418124039_Turn Appointment from many to many to 1to1")]
    partial class TurnAppointmentfrommanytomanyto1to1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartHealth_Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentID"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("PatientsNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientID");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INAMI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageSpoken")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginID")
                        .HasColumnType("int");

                    b.Property<int>("PersonalAddressAddressID")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalAddressAddressID")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("LoginID");

                    b.HasIndex("PersonalAddressAddressID");

                    b.HasIndex("ProfessionalAddressAddressID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.DoctorAvailability", b =>
                {
                    b.Property<int>("DoctorAvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorAvailabilityID"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("ValidtyEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidtyStart")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorAvailabilityID");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAvailability");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Login", b =>
                {
                    b.Property<int>("LoginID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginID");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoginID")
                        .HasColumnType("int");

                    b.Property<int>("PersonalAdressAddressID")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("LoginID");

                    b.HasIndex("PersonalAdressAddressID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Telecom", b =>
                {
                    b.Property<int>("TelecomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TelecomId"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<string>("TelecomValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TelecomId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Telecoms");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Appointment", b =>
                {
                    b.HasOne("SmartHealth_Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealth_Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Doctor", b =>
                {
                    b.HasOne("SmartHealth_Domain.Entities.Login", "Login")
                        .WithMany()
                        .HasForeignKey("LoginID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealth_Domain.Entities.Address", "PersonalAddress")
                        .WithMany()
                        .HasForeignKey("PersonalAddressAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealth_Domain.Entities.Address", "ProfessionalAddress")
                        .WithMany()
                        .HasForeignKey("ProfessionalAddressAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("PersonalAddress");

                    b.Navigation("ProfessionalAddress");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.DoctorAvailability", b =>
                {
                    b.HasOne("SmartHealth_Domain.Entities.Doctor", null)
                        .WithMany("Availability")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Patient", b =>
                {
                    b.HasOne("SmartHealth_Domain.Entities.Login", "Login")
                        .WithMany()
                        .HasForeignKey("LoginID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartHealth_Domain.Entities.Address", "PersonalAdress")
                        .WithMany()
                        .HasForeignKey("PersonalAdressAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");

                    b.Navigation("PersonalAdress");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Telecom", b =>
                {
                    b.HasOne("SmartHealth_Domain.Entities.Doctor", null)
                        .WithMany("Telecoms")
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availability");

                    b.Navigation("Telecoms");
                });

            modelBuilder.Entity("SmartHealth_Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
